<UserControl x:Class="dnGREP.WPF.UserControls.ResultsTree"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:my="clr-namespace:dnGREP.WPF"
             xmlns:Controls="clr-namespace:dnGREP.WPF.UserControls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:dummyData="clr-namespace:dnGREP.WPF.DesignTimeData"
             d:DataContext="{x:Static dummyData:DesignTimeData.DummyObservableGrepSearchResults}"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    </UserControl.Resources>
    <TreeView x:Name="tvSearchResult" ItemsSource="{Binding}" Grid.Row="3" VirtualizingStackPanel.IsVirtualizing="True"
                      MouseDoubleClick="tvSearchResult_MouseDoubleClick" PreviewKeyDown="treeKeyDown" SelectedItemChanged="tvSearchResults_SelectedChanged"
                      HorizontalContentAlignment="Stretch">
        <TreeView.Resources>
            <LinearGradientBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFD9F4FF" Offset="0"/>
                <GradientStop Color="#FF9BDDFB" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="{x:Static SystemColors.ControlBrushKey}" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFEEEDED" Offset="0"/>
                <GradientStop Color="#FFDDDDDD" Offset="1"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
            <HierarchicalDataTemplate DataType="{x:Type my:FormattedGrepResult}" ItemsSource="{Binding FormattedLines}" >
                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding Icon}"/>
                        <TextBlock Text="{Binding Label}" Margin="3,0,0,0"/>                    
                    </StackPanel>
                    <Viewbox Width="20" Height="20" Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Controls:BusyIndicator Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </Viewbox>
                </StackPanel>
            </HierarchicalDataTemplate>
            <DataTemplate DataType="{x:Type my:FormattedGrepLine}">
                <WrapPanel>
                    <WrapPanel.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True">
                                    <Setter Property="Background" Value="#FFD2D2D2"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="False">
                                    <Setter Property="Background" Value="#FFE0E0E0"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Style}" Value="Empty">
                                    <Setter Property="Background" Value="White"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </WrapPanel.Resources>
                    <TextBlock Margin="-3" Width="{Binding LineNumberColumnWidth}" Text="{Binding FormattedLineNumber}"/>
                    <my:InlineTextBlock Margin="3,0,0,0" InlineCollection="{Binding FormattedText}" FontFamily="Consolas"/>
                </WrapPanel>
            </DataTemplate>
        </TreeView.Resources>
        <TreeView.ContextMenu>
            <ContextMenu Opened="tvContexMenuOpening">
                <MenuItem Header="Open" Click="btnOpenFile_Click"/>
                <MenuItem Visibility="{Binding CustomEditorConfigured, Converter={StaticResource BooleanToVisibilityConverter}}" Header="Open with custom editor" Click="btnOpenFileCustomEditor_Click"/>
                <MenuItem Header="Open containing folder" Click="btnOpenContainingFolder_Click"/>
                <MenuItem Header="Show file properties" Click="btnShowFileProperties_Click"/>
                <MenuItem x:Name="btnCopyFileNameClipboard" Header="File name to clipboard" Click="btnCopyNameToClipboard_Click"/>
                <MenuItem x:Name="btnCopyTreeItemClipboard" Header="Full file path to clipboard" Click="btnCopyTreeItemToClipboard_Click"/>
                <Separator/>
                <MenuItem Header="Exclude from results" Click="btnExclude_Click"/>
                <MenuItem Header="Expand all" Click="btnExpandAll_Click"/>
                <MenuItem Header="Collapse all" Click="btnCollapseAll_Click"/>
            </ContextMenu>
        </TreeView.ContextMenu>
        <TreeView.ItemContainerStyle>
            <Style TargetType="{x:Type TreeViewItem}">
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                <EventSetter
                        Event="UIElement.MouseRightButtonDown"
                        Handler="tvSearchResult_MouseDown"/>
                <EventSetter
                        Event="UIElement.PreviewMouseLeftButtonDown"
                        Handler="tvSearchResult_PreviewMouseLeftButtonDown"/>
                <EventSetter
                        Event="UIElement.PreviewMouseMove"
                        Handler="tvSearchResult_PreviewMouseMove"/>
                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="BorderThickness" Value="1.5"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="19" Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Border x:Name="Bd" SnapsToDevicePixels="true" Grid.Column="1" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                    <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header"/>
                                </Border>
                                <ItemsPresenter x:Name="ItemsHost" Grid.Column="1"  Grid.ColumnSpan="2"  Grid.Row="1"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="true">
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="IsSelectionActive" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Style}" Value="Context">
                        <Setter Property="Foreground" Value="DarkGray"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Style}" Value="ReadOnly">
                        <Setter Property="Foreground" Value="DarkGray"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Style}" Value="Error">
                        <Setter Property="Foreground" Value="Red"/>
                    </DataTrigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="BorderBrush" Value="#adc6e5"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="IsSelectionActive" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="BorderBrush" Value="LightGray"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
        </TreeView.ItemContainerStyle>
    </TreeView>
</UserControl>
